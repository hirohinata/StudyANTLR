//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/azuri_hirohinata/Desktop/ANTLR/StudyANTLR/MnemonicParser/Mnemonic.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MnemonicParser.gen {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class MnemonicParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		RELAY_DEVICE=1, WORD_DEVICE=2, TIMER_DEVICE=3, COUNTER_DEVICE=4, Z_DEVICE=5, 
		TM_DEVICE=6, RAW_NUMBER=7, DOT_NUMBER=8, DEC_SHARP_NUMBER=9, DEC_K_NUMBER=10, 
		HEX_NUMBER=11, REAL_NUMBER=12, STRING=13, IDENTIFIER=14, IDENTIFIER_WITH_SYMBOL=15, 
		NULL=16, AT=17, ASTERISK=18, SHARP=19, DOT=20, COMMA=21, COLON=22, OPEN_BRACKET=23, 
		CLOSE_BRACKET=24, EOL=25, WS=26, COMMENT=27;
	public const int
		RULE_input = 0, RULE_line_input = 1, RULE_mnemonic = 2, RULE_line_comment = 3, 
		RULE_trivia = 4, RULE_instruction = 5, RULE_suffix = 6, RULE_operand_list = 7, 
		RULE_operand = 8, RULE_indexable_operand = 9, RULE_relay_device = 10, 
		RULE_wordbit_device = 11, RULE_word_device = 12, RULE_timer_device = 13, 
		RULE_counter_device = 14, RULE_label = 15, RULE_literal = 16, RULE_number = 17, 
		RULE_dec_number = 18, RULE_hex_number = 19, RULE_real_number = 20, RULE_string = 21;
	public static readonly string[] ruleNames = {
		"input", "line_input", "mnemonic", "line_comment", "trivia", "instruction", 
		"suffix", "operand_list", "operand", "indexable_operand", "relay_device", 
		"wordbit_device", "word_device", "timer_device", "counter_device", "label", 
		"literal", "number", "dec_number", "hex_number", "real_number", "string"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "'???'", "'@'", "'*'", "'#'", "'.'", "','", "':'", 
		"'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "RELAY_DEVICE", "WORD_DEVICE", "TIMER_DEVICE", "COUNTER_DEVICE", 
		"Z_DEVICE", "TM_DEVICE", "RAW_NUMBER", "DOT_NUMBER", "DEC_SHARP_NUMBER", 
		"DEC_K_NUMBER", "HEX_NUMBER", "REAL_NUMBER", "STRING", "IDENTIFIER", "IDENTIFIER_WITH_SYMBOL", 
		"NULL", "AT", "ASTERISK", "SHARP", "DOT", "COMMA", "COLON", "OPEN_BRACKET", 
		"CLOSE_BRACKET", "EOL", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Mnemonic.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MnemonicParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MnemonicParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MnemonicParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InputContext : ParserRuleContext {
		public Line_inputContext[] line_input() {
			return GetRuleContexts<Line_inputContext>();
		}
		public Line_inputContext line_input(int i) {
			return GetRuleContext<Line_inputContext>(i);
		}
		public ITerminalNode Eof() { return GetToken(MnemonicParser.Eof, 0); }
		public ITerminalNode[] EOL() { return GetTokens(MnemonicParser.EOL); }
		public ITerminalNode EOL(int i) {
			return GetToken(MnemonicParser.EOL, i);
		}
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMnemonicVisitor<TResult> typedVisitor = visitor as IMnemonicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 0, RULE_input);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 44; line_input();
			State = 49;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 45; Match(EOL);
					State = 46; line_input();
					}
					} 
				}
				State = 51;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EOL) {
				{
				State = 52; Match(EOL);
				}
			}

			State = 55; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Line_inputContext : ParserRuleContext {
		public MnemonicContext mnemonic() {
			return GetRuleContext<MnemonicContext>(0);
		}
		public Line_commentContext line_comment() {
			return GetRuleContext<Line_commentContext>(0);
		}
		public TriviaContext trivia() {
			return GetRuleContext<TriviaContext>(0);
		}
		public Line_inputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_input; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMnemonicVisitor<TResult> typedVisitor = visitor as IMnemonicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine_input(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Line_inputContext line_input() {
		Line_inputContext _localctx = new Line_inputContext(Context, State);
		EnterRule(_localctx, 2, RULE_line_input);
		try {
			State = 60;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 57; mnemonic();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 58; line_comment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 59; trivia();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MnemonicContext : ParserRuleContext {
		public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public TriviaContext trivia() {
			return GetRuleContext<TriviaContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(MnemonicParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(MnemonicParser.WS, i);
		}
		public Operand_listContext[] operand_list() {
			return GetRuleContexts<Operand_listContext>();
		}
		public Operand_listContext operand_list(int i) {
			return GetRuleContext<Operand_listContext>(i);
		}
		public MnemonicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mnemonic; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMnemonicVisitor<TResult> typedVisitor = visitor as IMnemonicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMnemonic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MnemonicContext mnemonic() {
		MnemonicContext _localctx = new MnemonicContext(Context, State);
		EnterRule(_localctx, 4, RULE_mnemonic);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 62; Match(WS);
				}
				}
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 68; instruction();
			State = 77;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 70;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 69; Match(WS);
						}
						}
						State = 72;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==WS );
					State = 74; operand_list();
					}
					} 
				}
				State = 79;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			State = 80; trivia();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Line_commentContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(MnemonicParser.COMMENT, 0); }
		public Line_commentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_comment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMnemonicVisitor<TResult> typedVisitor = visitor as IMnemonicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine_comment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Line_commentContext line_comment() {
		Line_commentContext _localctx = new Line_commentContext(Context, State);
		EnterRule(_localctx, 6, RULE_line_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; Match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriviaContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(MnemonicParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(MnemonicParser.WS, i);
		}
		public ITerminalNode COMMENT() { return GetToken(MnemonicParser.COMMENT, 0); }
		public TriviaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trivia; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMnemonicVisitor<TResult> typedVisitor = visitor as IMnemonicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrivia(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriviaContext trivia() {
		TriviaContext _localctx = new TriviaContext(Context, State);
		EnterRule(_localctx, 8, RULE_trivia);
		int _la;
		try {
			State = 97;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 85; Match(WS);
					}
					}
					State = 88;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WS );
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 90; Match(WS);
					}
					}
					State = 95;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 96; Match(COMMENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(MnemonicParser.IDENTIFIER, 0); }
		public ITerminalNode IDENTIFIER_WITH_SYMBOL() { return GetToken(MnemonicParser.IDENTIFIER_WITH_SYMBOL, 0); }
		public SuffixContext suffix() {
			return GetRuleContext<SuffixContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMnemonicVisitor<TResult> typedVisitor = visitor as IMnemonicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 10, RULE_instruction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIER || _la==IDENTIFIER_WITH_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 100; suffix();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuffixContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(MnemonicParser.DOT, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(MnemonicParser.IDENTIFIER, 0); }
		public SuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_suffix; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMnemonicVisitor<TResult> typedVisitor = visitor as IMnemonicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuffixContext suffix() {
		SuffixContext _localctx = new SuffixContext(Context, State);
		EnterRule(_localctx, 12, RULE_suffix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; Match(DOT);
			State = 104; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operand_listContext : ParserRuleContext {
		public OperandContext[] operand() {
			return GetRuleContexts<OperandContext>();
		}
		public OperandContext operand(int i) {
			return GetRuleContext<OperandContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(MnemonicParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(MnemonicParser.WS, i);
		}
		public Operand_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMnemonicVisitor<TResult> typedVisitor = visitor as IMnemonicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperand_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operand_listContext operand_list() {
		Operand_listContext _localctx = new Operand_listContext(Context, State);
		EnterRule(_localctx, 14, RULE_operand_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; operand();
			State = 115;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 108;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 107; Match(WS);
						}
						}
						State = 110;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==WS );
					State = 112; operand();
					}
					} 
				}
				State = 117;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		public Indexable_operandContext indexable_operand() {
			return GetRuleContext<Indexable_operandContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(MnemonicParser.COLON, 0); }
		public ITerminalNode Z_DEVICE() { return GetToken(MnemonicParser.Z_DEVICE, 0); }
		public Dec_numberContext dec_number() {
			return GetRuleContext<Dec_numberContext>(0);
		}
		public Relay_deviceContext relay_device() {
			return GetRuleContext<Relay_deviceContext>(0);
		}
		public Wordbit_deviceContext wordbit_device() {
			return GetRuleContext<Wordbit_deviceContext>(0);
		}
		public ITerminalNode AT() { return GetToken(MnemonicParser.AT, 0); }
		public ITerminalNode SHARP() { return GetToken(MnemonicParser.SHARP, 0); }
		public ITerminalNode TM_DEVICE() { return GetToken(MnemonicParser.TM_DEVICE, 0); }
		public ITerminalNode DOT_NUMBER() { return GetToken(MnemonicParser.DOT_NUMBER, 0); }
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMnemonicVisitor<TResult> typedVisitor = visitor as IMnemonicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(Context, State);
		EnterRule(_localctx, 16, RULE_operand);
		int _la;
		try {
			State = 139;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 118; indexable_operand();
				State = 119; Match(COLON);
				State = 122;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Z_DEVICE:
					{
					State = 120; Match(Z_DEVICE);
					}
					break;
				case RAW_NUMBER:
				case DEC_SHARP_NUMBER:
					{
					State = 121; dec_number();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 124; indexable_operand();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT) {
					{
					State = 125; Match(AT);
					}
				}

				State = 130;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case RELAY_DEVICE:
					{
					State = 128; relay_device();
					}
					break;
				case WORD_DEVICE:
				case TM_DEVICE:
					{
					State = 129; wordbit_device();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 132; Match(SHARP);
				State = 133; Match(TM_DEVICE);
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT_NUMBER) {
					{
					State = 134; Match(DOT_NUMBER);
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 137; Match(Z_DEVICE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 138; literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexable_operandContext : ParserRuleContext {
		public Relay_deviceContext relay_device() {
			return GetRuleContext<Relay_deviceContext>(0);
		}
		public ITerminalNode ASTERISK() { return GetToken(MnemonicParser.ASTERISK, 0); }
		public ITerminalNode AT() { return GetToken(MnemonicParser.AT, 0); }
		public Word_deviceContext word_device() {
			return GetRuleContext<Word_deviceContext>(0);
		}
		public Timer_deviceContext timer_device() {
			return GetRuleContext<Timer_deviceContext>(0);
		}
		public Counter_deviceContext counter_device() {
			return GetRuleContext<Counter_deviceContext>(0);
		}
		public ITerminalNode RAW_NUMBER() { return GetToken(MnemonicParser.RAW_NUMBER, 0); }
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public Indexable_operandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexable_operand; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMnemonicVisitor<TResult> typedVisitor = visitor as IMnemonicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexable_operand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indexable_operandContext indexable_operand() {
		Indexable_operandContext _localctx = new Indexable_operandContext(Context, State);
		EnterRule(_localctx, 18, RULE_indexable_operand);
		int _la;
		try {
			State = 177;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASTERISK) {
					{
					State = 141; Match(ASTERISK);
					}
				}

				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT) {
					{
					State = 144; Match(AT);
					}
				}

				State = 147; relay_device();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASTERISK) {
					{
					State = 148; Match(ASTERISK);
					}
				}

				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT) {
					{
					State = 151; Match(AT);
					}
				}

				State = 154; word_device();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASTERISK) {
					{
					State = 155; Match(ASTERISK);
					}
				}

				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT) {
					{
					State = 158; Match(AT);
					}
				}

				State = 161; timer_device();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASTERISK) {
					{
					State = 162; Match(ASTERISK);
					}
				}

				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT) {
					{
					State = 165; Match(AT);
					}
				}

				State = 168; counter_device();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT) {
					{
					State = 169; Match(AT);
					}
				}

				State = 172; Match(RAW_NUMBER);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASTERISK) {
					{
					State = 173; Match(ASTERISK);
					}
				}

				State = 176; label(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relay_deviceContext : ParserRuleContext {
		public ITerminalNode RELAY_DEVICE() { return GetToken(MnemonicParser.RELAY_DEVICE, 0); }
		public Relay_deviceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relay_device; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMnemonicVisitor<TResult> typedVisitor = visitor as IMnemonicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelay_device(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relay_deviceContext relay_device() {
		Relay_deviceContext _localctx = new Relay_deviceContext(Context, State);
		EnterRule(_localctx, 20, RULE_relay_device);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179; Match(RELAY_DEVICE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Wordbit_deviceContext : ParserRuleContext {
		public ITerminalNode WORD_DEVICE() { return GetToken(MnemonicParser.WORD_DEVICE, 0); }
		public ITerminalNode DOT_NUMBER() { return GetToken(MnemonicParser.DOT_NUMBER, 0); }
		public ITerminalNode TM_DEVICE() { return GetToken(MnemonicParser.TM_DEVICE, 0); }
		public Wordbit_deviceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wordbit_device; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMnemonicVisitor<TResult> typedVisitor = visitor as IMnemonicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWordbit_device(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Wordbit_deviceContext wordbit_device() {
		Wordbit_deviceContext _localctx = new Wordbit_deviceContext(Context, State);
		EnterRule(_localctx, 22, RULE_wordbit_device);
		try {
			State = 185;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WORD_DEVICE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 181; Match(WORD_DEVICE);
				State = 182; Match(DOT_NUMBER);
				}
				break;
			case TM_DEVICE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 183; Match(TM_DEVICE);
				State = 184; Match(DOT_NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Word_deviceContext : ParserRuleContext {
		public ITerminalNode WORD_DEVICE() { return GetToken(MnemonicParser.WORD_DEVICE, 0); }
		public ITerminalNode TM_DEVICE() { return GetToken(MnemonicParser.TM_DEVICE, 0); }
		public Word_deviceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_word_device; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMnemonicVisitor<TResult> typedVisitor = visitor as IMnemonicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWord_device(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Word_deviceContext word_device() {
		Word_deviceContext _localctx = new Word_deviceContext(Context, State);
		EnterRule(_localctx, 24, RULE_word_device);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			_la = TokenStream.LA(1);
			if ( !(_la==WORD_DEVICE || _la==TM_DEVICE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Timer_deviceContext : ParserRuleContext {
		public ITerminalNode TIMER_DEVICE() { return GetToken(MnemonicParser.TIMER_DEVICE, 0); }
		public Timer_deviceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timer_device; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMnemonicVisitor<TResult> typedVisitor = visitor as IMnemonicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimer_device(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Timer_deviceContext timer_device() {
		Timer_deviceContext _localctx = new Timer_deviceContext(Context, State);
		EnterRule(_localctx, 26, RULE_timer_device);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189; Match(TIMER_DEVICE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Counter_deviceContext : ParserRuleContext {
		public ITerminalNode COUNTER_DEVICE() { return GetToken(MnemonicParser.COUNTER_DEVICE, 0); }
		public Counter_deviceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_counter_device; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMnemonicVisitor<TResult> typedVisitor = visitor as IMnemonicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCounter_device(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Counter_deviceContext counter_device() {
		Counter_deviceContext _localctx = new Counter_deviceContext(Context, State);
		EnterRule(_localctx, 28, RULE_counter_device);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; Match(COUNTER_DEVICE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(MnemonicParser.IDENTIFIER, 0); }
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public ITerminalNode DOT_NUMBER() { return GetToken(MnemonicParser.DOT_NUMBER, 0); }
		public ITerminalNode DOT() { return GetToken(MnemonicParser.DOT, 0); }
		public ITerminalNode OPEN_BRACKET() { return GetToken(MnemonicParser.OPEN_BRACKET, 0); }
		public OperandContext[] operand() {
			return GetRuleContexts<OperandContext>();
		}
		public OperandContext operand(int i) {
			return GetRuleContext<OperandContext>(i);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(MnemonicParser.CLOSE_BRACKET, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(MnemonicParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MnemonicParser.COMMA, i);
		}
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMnemonicVisitor<TResult> typedVisitor = visitor as IMnemonicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		return label(0);
	}

	private LabelContext label(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LabelContext _localctx = new LabelContext(Context, _parentState);
		LabelContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_label, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 194; Match(IDENTIFIER);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 215;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 213;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
					case 1:
						{
						_localctx = new LabelContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_label);
						State = 196;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 197; Match(DOT_NUMBER);
						}
						break;
					case 2:
						{
						_localctx = new LabelContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_label);
						State = 198;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 199; Match(DOT);
						State = 200; Match(IDENTIFIER);
						}
						break;
					case 3:
						{
						_localctx = new LabelContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_label);
						State = 201;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 202; Match(OPEN_BRACKET);
						State = 203; operand();
						State = 208;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==COMMA) {
							{
							{
							State = 204; Match(COMMA);
							State = 205; operand();
							}
							}
							State = 210;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 211; Match(CLOSE_BRACKET);
						}
						break;
					}
					} 
				}
				State = 217;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ITerminalNode NULL() { return GetToken(MnemonicParser.NULL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMnemonicVisitor<TResult> typedVisitor = visitor as IMnemonicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 32, RULE_literal);
		try {
			State = 221;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RAW_NUMBER:
			case DOT_NUMBER:
			case DEC_SHARP_NUMBER:
			case DEC_K_NUMBER:
			case HEX_NUMBER:
			case REAL_NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 218; number();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 219; @string();
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 220; Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public Dec_numberContext dec_number() {
			return GetRuleContext<Dec_numberContext>(0);
		}
		public ITerminalNode DEC_K_NUMBER() { return GetToken(MnemonicParser.DEC_K_NUMBER, 0); }
		public Hex_numberContext hex_number() {
			return GetRuleContext<Hex_numberContext>(0);
		}
		public Real_numberContext real_number() {
			return GetRuleContext<Real_numberContext>(0);
		}
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMnemonicVisitor<TResult> typedVisitor = visitor as IMnemonicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 34, RULE_number);
		try {
			State = 227;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RAW_NUMBER:
			case DEC_SHARP_NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 223; dec_number();
				}
				break;
			case DEC_K_NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 224; Match(DEC_K_NUMBER);
				}
				break;
			case HEX_NUMBER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 225; hex_number();
				}
				break;
			case DOT_NUMBER:
			case REAL_NUMBER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 226; real_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dec_numberContext : ParserRuleContext {
		public ITerminalNode DEC_SHARP_NUMBER() { return GetToken(MnemonicParser.DEC_SHARP_NUMBER, 0); }
		public ITerminalNode RAW_NUMBER() { return GetToken(MnemonicParser.RAW_NUMBER, 0); }
		public Dec_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dec_number; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMnemonicVisitor<TResult> typedVisitor = visitor as IMnemonicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDec_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dec_numberContext dec_number() {
		Dec_numberContext _localctx = new Dec_numberContext(Context, State);
		EnterRule(_localctx, 36, RULE_dec_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			_la = TokenStream.LA(1);
			if ( !(_la==RAW_NUMBER || _la==DEC_SHARP_NUMBER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hex_numberContext : ParserRuleContext {
		public ITerminalNode HEX_NUMBER() { return GetToken(MnemonicParser.HEX_NUMBER, 0); }
		public Hex_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hex_number; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMnemonicVisitor<TResult> typedVisitor = visitor as IMnemonicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHex_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Hex_numberContext hex_number() {
		Hex_numberContext _localctx = new Hex_numberContext(Context, State);
		EnterRule(_localctx, 38, RULE_hex_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231; Match(HEX_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Real_numberContext : ParserRuleContext {
		public ITerminalNode REAL_NUMBER() { return GetToken(MnemonicParser.REAL_NUMBER, 0); }
		public ITerminalNode DOT_NUMBER() { return GetToken(MnemonicParser.DOT_NUMBER, 0); }
		public Real_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_real_number; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMnemonicVisitor<TResult> typedVisitor = visitor as IMnemonicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReal_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Real_numberContext real_number() {
		Real_numberContext _localctx = new Real_numberContext(Context, State);
		EnterRule(_localctx, 40, RULE_real_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			_la = TokenStream.LA(1);
			if ( !(_la==DOT_NUMBER || _la==REAL_NUMBER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(MnemonicParser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMnemonicVisitor<TResult> typedVisitor = visitor as IMnemonicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 42, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 15: return label_sempred((LabelContext)_localctx, predIndex);
		}
		return true;
	}
	private bool label_sempred(LabelContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		case 2: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1D', '\xF0', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', '\x32', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '\x35', '\v', '\x2', '\x3', '\x2', '\x5', '\x2', '\x38', '\n', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '?', '\n', '\x3', '\x3', '\x4', '\a', '\x4', '\x42', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x45', '\v', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x6', '\x4', 'I', '\n', '\x4', '\r', '\x4', '\xE', '\x4', 
		'J', '\x3', '\x4', '\a', '\x4', 'N', '\n', '\x4', '\f', '\x4', '\xE', 
		'\x4', 'Q', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x6', '\x6', 'Y', '\n', '\x6', '\r', 
		'\x6', '\xE', '\x6', 'Z', '\x3', '\x6', '\a', '\x6', '^', '\n', '\x6', 
		'\f', '\x6', '\xE', '\x6', '\x61', '\v', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'\x64', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'h', '\n', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x6', '\t', 'o', '\n', '\t', '\r', '\t', '\xE', '\t', 'p', '\x3', '\t', 
		'\a', '\t', 't', '\n', '\t', '\f', '\t', '\xE', '\t', 'w', '\v', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '}', 
		'\n', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x81', '\n', '\n', 
		'\x3', '\n', '\x3', '\n', '\x5', '\n', '\x85', '\n', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x5', '\n', '\x8A', '\n', '\n', '\x3', '\n', 
		'\x3', '\n', '\x5', '\n', '\x8E', '\n', '\n', '\x3', '\v', '\x5', '\v', 
		'\x91', '\n', '\v', '\x3', '\v', '\x5', '\v', '\x94', '\n', '\v', '\x3', 
		'\v', '\x3', '\v', '\x5', '\v', '\x98', '\n', '\v', '\x3', '\v', '\x5', 
		'\v', '\x9B', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x9F', 
		'\n', '\v', '\x3', '\v', '\x5', '\v', '\xA2', '\n', '\v', '\x3', '\v', 
		'\x3', '\v', '\x5', '\v', '\xA6', '\n', '\v', '\x3', '\v', '\x5', '\v', 
		'\xA9', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xAD', '\n', 
		'\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xB1', '\n', '\v', '\x3', 
		'\v', '\x5', '\v', '\xB4', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xBC', '\n', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', 
		'\xD1', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\xD4', '\v', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\xD8', '\n', '\x11', '\f', 
		'\x11', '\xE', '\x11', '\xDB', '\v', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x5', '\x12', '\xE0', '\n', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xE6', '\n', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x2', '\x3', 
		' ', '\x18', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '\x2', '\x6', '\x3', '\x2', '\x10', '\x11', '\x4', '\x2', '\x4', 
		'\x4', '\b', '\b', '\x4', '\x2', '\t', '\t', '\v', '\v', '\x4', '\x2', 
		'\n', '\n', '\xE', '\xE', '\x2', '\x109', '\x2', '.', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '>', '\x3', '\x2', '\x2', '\x2', '\x6', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\b', 'T', '\x3', '\x2', '\x2', '\x2', '\n', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\x65', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'i', '\x3', '\x2', '\x2', '\x2', '\x10', 'l', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x14', '\xB3', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\xB5', '\x3', '\x2', '\x2', '\x2', '\x18', '\xBB', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\xBD', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\xBF', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xC1', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\xC3', '\x3', '\x2', '\x2', '\x2', '\"', '\xDF', '\x3', 
		'\x2', '\x2', '\x2', '$', '\xE5', '\x3', '\x2', '\x2', '\x2', '&', '\xE7', 
		'\x3', '\x2', '\x2', '\x2', '(', '\xE9', '\x3', '\x2', '\x2', '\x2', '*', 
		'\xEB', '\x3', '\x2', '\x2', '\x2', ',', '\xED', '\x3', '\x2', '\x2', 
		'\x2', '.', '\x33', '\x5', '\x4', '\x3', '\x2', '/', '\x30', '\a', '\x1B', 
		'\x2', '\x2', '\x30', '\x32', '\x5', '\x4', '\x3', '\x2', '\x31', '/', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x33', '\x31', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x37', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x38', '\a', '\x1B', '\x2', '\x2', 
		'\x37', '\x36', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x39', '\x3', '\x2', '\x2', '\x2', '\x39', ':', 
		'\a', '\x2', '\x2', '\x3', ':', '\x3', '\x3', '\x2', '\x2', '\x2', ';', 
		'?', '\x5', '\x6', '\x4', '\x2', '<', '?', '\x5', '\b', '\x5', '\x2', 
		'=', '?', '\x5', '\n', '\x6', '\x2', '>', ';', '\x3', '\x2', '\x2', '\x2', 
		'>', '<', '\x3', '\x2', '\x2', '\x2', '>', '=', '\x3', '\x2', '\x2', '\x2', 
		'?', '\x5', '\x3', '\x2', '\x2', '\x2', '@', '\x42', '\a', '\x1C', '\x2', 
		'\x2', '\x41', '@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x44', '\x3', '\x2', '\x2', '\x2', '\x44', '\x46', '\x3', '\x2', '\x2', 
		'\x2', '\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\x46', 'O', '\x5', 
		'\f', '\a', '\x2', 'G', 'I', '\a', '\x1C', '\x2', '\x2', 'H', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', 'H', '\x3', 
		'\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x3', 
		'\x2', '\x2', '\x2', 'L', 'N', '\x5', '\x10', '\t', '\x2', 'M', 'H', '\x3', 
		'\x2', '\x2', '\x2', 'N', 'Q', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', 
		'\x2', '\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', 'R', '\x3', 
		'\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x5', 
		'\n', '\x6', '\x2', 'S', '\a', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\a', 
		'\x1D', '\x2', '\x2', 'U', '\t', '\x3', '\x2', '\x2', '\x2', 'V', '\x64', 
		'\x3', '\x2', '\x2', '\x2', 'W', 'Y', '\a', '\x1C', '\x2', '\x2', 'X', 
		'W', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'Z', 'X', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x3', '\x2', '\x2', '\x2', 
		'[', '\x64', '\x3', '\x2', '\x2', '\x2', '\\', '^', '\a', '\x1C', '\x2', 
		'\x2', ']', '\\', '\x3', '\x2', '\x2', '\x2', '^', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '_', ']', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x62', '\x3', '\x2', '\x2', '\x2', '\x61', '_', '\x3', 
		'\x2', '\x2', '\x2', '\x62', '\x64', '\a', '\x1D', '\x2', '\x2', '\x63', 
		'V', '\x3', '\x2', '\x2', '\x2', '\x63', 'X', '\x3', '\x2', '\x2', '\x2', 
		'\x63', '_', '\x3', '\x2', '\x2', '\x2', '\x64', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x65', 'g', '\t', '\x2', '\x2', '\x2', '\x66', 'h', '\x5', '\xE', 
		'\b', '\x2', 'g', '\x66', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x3', 
		'\x2', '\x2', '\x2', 'h', '\r', '\x3', '\x2', '\x2', '\x2', 'i', 'j', 
		'\a', '\x16', '\x2', '\x2', 'j', 'k', '\a', '\x10', '\x2', '\x2', 'k', 
		'\xF', '\x3', '\x2', '\x2', '\x2', 'l', 'u', '\x5', '\x12', '\n', '\x2', 
		'm', 'o', '\a', '\x1C', '\x2', '\x2', 'n', 'm', '\x3', '\x2', '\x2', '\x2', 
		'o', 'p', '\x3', '\x2', '\x2', '\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 
		'p', 'q', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\x3', '\x2', '\x2', '\x2', 
		'r', 't', '\x5', '\x12', '\n', '\x2', 's', 'n', '\x3', '\x2', '\x2', '\x2', 
		't', 'w', '\x3', '\x2', '\x2', '\x2', 'u', 's', '\x3', '\x2', '\x2', '\x2', 
		'u', 'v', '\x3', '\x2', '\x2', '\x2', 'v', '\x11', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'u', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x5', '\x14', 
		'\v', '\x2', 'y', '|', '\a', '\x18', '\x2', '\x2', 'z', '}', '\a', '\a', 
		'\x2', '\x2', '{', '}', '\x5', '&', '\x14', '\x2', '|', 'z', '\x3', '\x2', 
		'\x2', '\x2', '|', '{', '\x3', '\x2', '\x2', '\x2', '}', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '~', '\x8E', '\x5', '\x14', '\v', '\x2', '\x7F', 
		'\x81', '\a', '\x13', '\x2', '\x2', '\x80', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x80', '\x81', '\x3', '\x2', '\x2', '\x2', '\x81', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x82', '\x85', '\x5', '\x16', '\f', '\x2', '\x83', 
		'\x85', '\x5', '\x18', '\r', '\x2', '\x84', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x84', '\x83', '\x3', '\x2', '\x2', '\x2', '\x85', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '\x86', '\x87', '\a', '\x15', '\x2', '\x2', '\x87', 
		'\x89', '\a', '\b', '\x2', '\x2', '\x88', '\x8A', '\a', '\n', '\x2', '\x2', 
		'\x89', '\x88', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8E', 
		'\a', '\a', '\x2', '\x2', '\x8C', '\x8E', '\x5', '\"', '\x12', '\x2', 
		'\x8D', 'x', '\x3', '\x2', '\x2', '\x2', '\x8D', '~', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\x80', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x8C', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\x91', '\a', '\x14', '\x2', '\x2', '\x90', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\x91', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\x92', '\x94', '\a', '\x13', '\x2', 
		'\x2', '\x93', '\x92', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x95', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\xB4', '\x5', '\x16', '\f', '\x2', '\x96', '\x98', '\a', '\x14', '\x2', 
		'\x2', '\x97', '\x96', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x99', 
		'\x9B', '\a', '\x13', '\x2', '\x2', '\x9A', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\x3', 
		'\x2', '\x2', '\x2', '\x9C', '\xB4', '\x5', '\x1A', '\xE', '\x2', '\x9D', 
		'\x9F', '\a', '\x14', '\x2', '\x2', '\x9E', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\xA0', '\xA2', '\a', '\x13', '\x2', '\x2', '\xA1', 
		'\xA0', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xB4', '\x5', 
		'\x1C', '\xF', '\x2', '\xA4', '\xA6', '\a', '\x14', '\x2', '\x2', '\xA5', 
		'\xA4', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA9', '\a', 
		'\x13', '\x2', '\x2', '\xA8', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA8', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\x3', '\x2', '\x2', 
		'\x2', '\xAA', '\xB4', '\x5', '\x1E', '\x10', '\x2', '\xAB', '\xAD', '\a', 
		'\x13', '\x2', '\x2', '\xAC', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'\xAD', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\x3', '\x2', '\x2', 
		'\x2', '\xAE', '\xB4', '\a', '\t', '\x2', '\x2', '\xAF', '\xB1', '\a', 
		'\x14', '\x2', '\x2', '\xB0', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB0', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xB4', '\x5', ' ', '\x11', '\x2', '\xB3', '\x90', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\x97', '\x3', '\x2', '\x2', '\x2', '\xB3', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\xB3', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB0', '\x3', 
		'\x2', '\x2', '\x2', '\xB4', '\x15', '\x3', '\x2', '\x2', '\x2', '\xB5', 
		'\xB6', '\a', '\x3', '\x2', '\x2', '\xB6', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\xB7', '\xB8', '\a', '\x4', '\x2', '\x2', '\xB8', '\xBC', '\a', 
		'\n', '\x2', '\x2', '\xB9', '\xBA', '\a', '\b', '\x2', '\x2', '\xBA', 
		'\xBC', '\a', '\n', '\x2', '\x2', '\xBB', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\xBB', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xBC', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\xBD', '\xBE', '\t', '\x3', '\x2', '\x2', '\xBE', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', '\a', '\x5', '\x2', 
		'\x2', '\xC0', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\a', 
		'\x6', '\x2', '\x2', '\xC2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xC3', 
		'\xC4', '\b', '\x11', '\x1', '\x2', '\xC4', '\xC5', '\a', '\x10', '\x2', 
		'\x2', '\xC5', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\f', 
		'\x5', '\x2', '\x2', '\xC7', '\xD8', '\a', '\n', '\x2', '\x2', '\xC8', 
		'\xC9', '\f', '\x4', '\x2', '\x2', '\xC9', '\xCA', '\a', '\x16', '\x2', 
		'\x2', '\xCA', '\xD8', '\a', '\x10', '\x2', '\x2', '\xCB', '\xCC', '\f', 
		'\x3', '\x2', '\x2', '\xCC', '\xCD', '\a', '\x19', '\x2', '\x2', '\xCD', 
		'\xD2', '\x5', '\x12', '\n', '\x2', '\xCE', '\xCF', '\a', '\x17', '\x2', 
		'\x2', '\xCF', '\xD1', '\x5', '\x12', '\n', '\x2', '\xD0', '\xCE', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD2', 
		'\xD0', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD2', '\x3', 
		'\x2', '\x2', '\x2', '\xD5', '\xD6', '\a', '\x1A', '\x2', '\x2', '\xD6', 
		'\xD8', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xC6', '\x3', '\x2', '\x2', 
		'\x2', '\xD7', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\xD8', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xD9', 
		'\xD7', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDA', '\x3', '\x2', '\x2', 
		'\x2', '\xDA', '!', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xD9', '\x3', 
		'\x2', '\x2', '\x2', '\xDC', '\xE0', '\x5', '$', '\x13', '\x2', '\xDD', 
		'\xE0', '\x5', ',', '\x17', '\x2', '\xDE', '\xE0', '\a', '\x12', '\x2', 
		'\x2', '\xDF', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xDD', '\x3', 
		'\x2', '\x2', '\x2', '\xDF', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xE0', 
		'#', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE6', '\x5', '&', '\x14', '\x2', 
		'\xE2', '\xE6', '\a', '\f', '\x2', '\x2', '\xE3', '\xE6', '\x5', '(', 
		'\x15', '\x2', '\xE4', '\xE6', '\x5', '*', '\x16', '\x2', '\xE5', '\xE1', 
		'\x3', '\x2', '\x2', '\x2', '\xE5', '\xE2', '\x3', '\x2', '\x2', '\x2', 
		'\xE5', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE4', '\x3', '\x2', 
		'\x2', '\x2', '\xE6', '%', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', 
		'\t', '\x4', '\x2', '\x2', '\xE8', '\'', '\x3', '\x2', '\x2', '\x2', '\xE9', 
		'\xEA', '\a', '\r', '\x2', '\x2', '\xEA', ')', '\x3', '\x2', '\x2', '\x2', 
		'\xEB', '\xEC', '\t', '\x5', '\x2', '\x2', '\xEC', '+', '\x3', '\x2', 
		'\x2', '\x2', '\xED', '\xEE', '\a', '\xF', '\x2', '\x2', '\xEE', '-', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x33', '\x37', '>', '\x43', 'J', 'O', 
		'Z', '_', '\x63', 'g', 'p', 'u', '|', '\x80', '\x84', '\x89', '\x8D', 
		'\x90', '\x93', '\x97', '\x9A', '\x9E', '\xA1', '\xA5', '\xA8', '\xAC', 
		'\xB0', '\xB3', '\xBB', '\xD2', '\xD7', '\xD9', '\xDF', '\xE5',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MnemonicParser.gen
